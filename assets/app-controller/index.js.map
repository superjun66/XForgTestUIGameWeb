{"version":3,"sources":["../file:/D:/XForgTestUIGameUp/assets/app-builtin/app-controller/file:/D:/XForgTestUIGameUp/assets/app-builtin/app-controller/HomeController.ts","../file:/D:/XForgTestUIGameUp/assets/app-builtin/app-controller/file:/D:/XForgTestUIGameUp/assets/app-builtin/app-controller/RoomController.ts"],"names":["_BaseController","HomeController","_this","_len","arguments","length","args","Array","_key","call","apply","concat","test","_inheritsLoose","_proto","prototype","refresh","name","this","emit","Event","Refresh1","identityCountUpdate","data","IDENTITY_COUNT_UPDATE","BaseController","_RF","pop","RoomController","updateGameIdentity","type","UPDATE_GAME_IDENTITY"],"mappings":";;mWAC2BA,GAAA,SAAAC,IAAA,IAAA,IAAAC,EAAAC,EAAAC,UAAAC,OAAAC,MAAAC,MAAAJ,GAAAK,IAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GASf,OATeN,EAAAF,EAAAS,KAAAC,MAAAV,SAAAW,OAAAL,WASvBM,KAAO,EAACV,EATeW,EAAAZ,EAAAD,GASf,IAAAc,EAAAb,EAAAc,UAaP,OAXDD,EAIAE,QAAA,SAAQC,GACJC,KAAKN,KAAO,EACZM,KAAKC,KAAKlB,EAAemB,MAAMC,SAAUJ,IAC5CH,EAEDQ,oBAAA,SAAoBC,GAChBL,KAAKC,KAAKlB,EAAemB,MAAMI,sBAAsBD,IACxDtB,GAtB+BwB,QAuBnCC,IAAAC;;mWCvB0B3B,GAAA,SAAA4B,IAAA,OAAA5B,EAAAU,WAAAN,iBAYtB,OAZsBS,EAAAe,EAAA5B,GAAA4B,EAAAb,UAUvBc,mBAAA,SAAmBC,GACfZ,KAAKC,KAAKS,EAAeR,MAAMW,qBAAqBD,IACvDF,GAZ+BH,QAanCC,IAAAC","file":"all.js","sourcesContent":["import BaseController from '../../../extensions/app/assets/base/BaseController';\r\nexport class HomeController extends BaseController<HomeController, {\r\n    // 定义了事件，并同时定义参数列表和返回值\r\n    Refresh1: (a: string) => any\r\n    Refresh2: (a: string) => any // Refresh2是一个完全内部的事件，因为没有写对外暴露的接口\r\n    IDENTITY_COUNT_UPDATE: (data: { type: number, count: number }) => void\r\n}>() {\r\n    /**\r\n     * 对外暴露的变量，外部只能读，内部才可以写\r\n     */\r\n    test = 0;\r\n\r\n    /**\r\n     * 对外暴露的接口，外部调用refresh方法时，会触发Refresh1事件\r\n     * @param name \r\n     */\r\n    refresh(name: string) {\r\n        this.test = 1; // 内部可以写\r\n        this.emit(HomeController.Event.Refresh1, name);\r\n    }\r\n    \r\n    identityCountUpdate(data: { type: number, count: number ,cutCount: number}) {\r\n        this.emit(HomeController.Event.IDENTITY_COUNT_UPDATE,data);\r\n    }\r\n}","import BaseController from '../../../extensions/app/assets/base/BaseController';\r\nexport class RoomController extends BaseController<RoomController, {\r\n    // 定义了事件，并同时定义参数列表和返回值\r\n    UPDATE_GAME_IDENTITY: (type: number) => void\r\n\r\n}>() {\r\n    // Controller中发射事件, UI中监听事件:\r\n    // 1、UI中需要将 「extends BaseView」 改为=> 「extends BaseView.bindController(RoomController)」\r\n    // 2、UI中使用「this.controller.on/once」监听事件, 使用「this.controller.emit」发射事件, 使用「this.controller.off/targetOff」取消监听事件\r\n    // 3、在外部(无法使用this.controller的地方)可以通过「app.controller.xxx」来调用对外导出的方法, 比如下面的refresh方法\r\n\r\n    updateGameIdentity(type: number) {\r\n        this.emit(RoomController.Event.UPDATE_GAME_IDENTITY,type);\r\n    }\r\n}"]}