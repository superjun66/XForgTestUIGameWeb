{"version":3,"sources":["../file:/D:/CocosDashboard_1.0.9/Creator/Creator/3.8.6/resources/resources/3d/engine/editor/assets/tools/file:/D:/CocosDashboard_1.0.9/Creator/Creator/3.8.6/resources/resources/3d/engine/editor/assets/tools/debug-view-runtime-control.ts"],"names":["ccclass","_decorator","property","_dec","_dec2","Node","_dec3","_dec4","_descriptor","_applyDecoratedDescriptor","_class2","_Component","DebugViewRuntimeControl","_this","_len","arguments","length","args","Array","_key","call","apply","concat","_initializerDefineProperty","_assertThisInitialized","_descriptor2","_descriptor3","_single","strSingle","strComposite","strMisc","compositeModeToggleList","singleModeToggleList","miscModeToggleList","textComponentList","labelComponentList","textContentList","hideButtonLabel","_currentColorIndex","strColor","color","Color","WHITE","BLACK","RED","GREEN","BLUE","_inheritsLoose","_proto","prototype","start","this","node","parent","getComponent","Canvas","uiTransform","UITransform","halfScreenWidth","width","halfScreenHeight","height","x","y","miscNode","getChildByName","buttonNode","instantiate","name","titleNode","i","newLabel","EnableAllCompositeModeButton","setPosition","setScale","labelComponent","Label","string","overflow","currentRow","newNode","singleModeToggle","textComponent","getComponentInChildren","RichText","on","Toggle","EventType","TOGGLE","toggleSingleMode","Button","CLICK","enableAllCompositeMode","changeColorButton","changeTextColor","HideButton","hideUI","compositeModeToggle","isChecked","toggleLightingWithAlbedo","toggleCSMColoration","toggleCompositeMode","console","error","isTextMatched","textUI","textDescription","tempText","String","findIndex","search","substr","toggle","debugView","director","root","singleMode","enableCompositeMode","lightingWithAlbedo","csmLayerColoration","button","toggleComponent","activeValue","active","onLoad","update","deltaTime","Component","configurable","enumerable","writable","initializer","_class","_RF","pop"],"mappings":"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","file":"all.js","sourcesContent":["import { Color, Canvas, UITransform, instantiate, math, Toggle, TextureCube, _decorator, Component, Button, labelAssembler, game, director, Node, Scene, renderer, CameraComponent, Label, ForwardPipeline, RichText } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('internal.DebugViewRuntimeControl')\r\nexport class DebugViewRuntimeControl extends Component {\r\n    @property(Node)\r\n    compositeModeToggle: Node | null = null;\r\n    @property(Node)\r\n    singleModeToggle: Node | null = null;\r\n    @property(Node)\r\n    EnableAllCompositeModeButton: Node | null = null;\r\n\t_single: number = 0;\r\n\r\n    private strSingle: string[] = [\r\n        'No Single Debug',\r\n        'Vertex Color',\r\n        'Vertex Normal',\r\n        'Vertex Tangent',\r\n        'World Position',\r\n        'Vertex Mirror',\r\n        'Face Side',\r\n        'UV0',\r\n        'UV1',\r\n        'UV Lightmap',\r\n        'Project Depth',\r\n        'Linear Depth',\r\n\r\n        'Fragment Normal',\r\n        'Fragment Tangent',\r\n        'Fragment Binormal',\r\n        'Base Color',\r\n        'Diffuse Color',\r\n        'Specular Color',\r\n        'Transparency',\r\n        'Metallic',\r\n        'Roughness',\r\n        'Specular Intensity',\r\n        'IOR',\r\n\r\n        'Direct Diffuse',\r\n        'Direct Specular',\r\n        'Direct All',\r\n        'Env Diffuse',\r\n        'Env Specular',\r\n        'Env All',\r\n        'Emissive',\r\n        'Light Map',\r\n        'Shadow',\r\n        'AO',\r\n\r\n        'Fresnel',\r\n        'Direct Transmit Diffuse',\r\n        'Direct Transmit Specular',\r\n        'Env Transmit Diffuse',\r\n        'Env Transmit Specular',\r\n        'Transmit All',\r\n        'Direct Internal Specular',\r\n        'Env Internal Specular',\r\n        'Internal All',\r\n\r\n        'Fog',\r\n    ];\r\n    private strComposite: string[] = [\r\n        'Direct Diffuse',\r\n        'Direct Specular',\r\n        'Env Diffuse',\r\n        'Env Specular',\r\n        'Emissive',\r\n        'Light Map',\r\n        'Shadow',\r\n        'AO',\r\n\r\n        'Normal Map',\r\n        'Fog',\r\n\r\n        'Tone Mapping',\r\n        'Gamma Correction',\r\n\r\n        'Fresnel',\r\n        'Transmit Diffuse',\r\n        'Transmit Specular',\r\n        'Internal Specular',\r\n        'TT',\r\n    ];\r\n    private strMisc: string[] = [\r\n        'CSM Layer Coloration',\r\n        'Lighting With Albedo',\r\n    ];\r\n\r\n    private compositeModeToggleList: Node[] = [];\r\n    private singleModeToggleList: Node[] = [];\r\n    private miscModeToggleList: Node[] = [];\r\n    private textComponentList: RichText[] = [];\r\n    private labelComponentList: Label[] = [];\r\n    private textContentList: string[] = [];\r\n    private hideButtonLabel: Label;\r\n    start() {\r\n        // get canvas resolution\r\n        const canvas = this.node.parent.getComponent(Canvas);\r\n        if (!canvas) {\r\n            console.error('debug-view-runtime-control should be child of Canvas');\r\n            return;\r\n        }\r\n\r\n        const uiTransform = this.node.parent.getComponent(UITransform);\r\n        const halfScreenWidth = uiTransform.width * 0.5;\r\n        const halfScreenHeight = uiTransform.height * 0.5;\r\n\r\n        let x = -halfScreenWidth + halfScreenWidth * 0.1, y = halfScreenHeight - halfScreenHeight * 0.1;\r\n        const width = 200, height = 20;\r\n\r\n        // new nodes\r\n        const miscNode = this.node.getChildByName('MiscMode');\r\n        const buttonNode = instantiate(miscNode);\r\n        buttonNode.parent = this.node;\r\n        buttonNode.name = 'Buttons';\r\n        const titleNode = instantiate(miscNode);\r\n        titleNode.parent = this.node;\r\n        titleNode.name = 'Titles';\r\n\r\n        // title\r\n        for (let i = 0; i < 2; i++) {\r\n            const newLabel = instantiate(this.EnableAllCompositeModeButton.getChildByName('Label'));\r\n            newLabel.setPosition(x + (i > 0 ? 50 + width * 2 : 150), y, 0.0);\r\n            newLabel.setScale(0.75, 0.75, 0.75);\r\n            newLabel.parent = titleNode;\r\n            const labelComponent = newLabel.getComponent(Label);\r\n            labelComponent.string = i ? '----------Composite Mode----------' : '----------Single Mode----------';\r\n            labelComponent.color = Color.WHITE;\r\n            labelComponent.overflow = 0;\r\n            this.labelComponentList[this.labelComponentList.length] = labelComponent;\r\n        }\r\n\r\n        y -= height;\r\n        // single\r\n        let currentRow = 0;\r\n        for (let i = 0; i < this.strSingle.length; i++, currentRow++) {\r\n            if (i === this.strSingle.length >> 1) {\r\n                x += width;\r\n                currentRow = 0;\r\n            }\r\n            const newNode = i ? instantiate(this.singleModeToggle) : this.singleModeToggle;\r\n            newNode.setPosition(x, y - height * currentRow, 0.0);\r\n            newNode.setScale(0.5, 0.5, 0.5);\r\n            newNode.parent = this.singleModeToggle.parent;\r\n\r\n            const textComponent = newNode.getComponentInChildren(RichText);\r\n            textComponent.string = this.strSingle[i];\r\n            this.textComponentList[this.textComponentList.length] = textComponent;\r\n            this.textContentList[this.textContentList.length] = textComponent.string;\r\n\r\n            newNode.on(Toggle.EventType.TOGGLE, this.toggleSingleMode, this);\r\n\r\n            this.singleModeToggleList[i] = newNode;\r\n        }\r\n\r\n        x += width;\r\n        // buttons\r\n        this.EnableAllCompositeModeButton.setPosition(x + 15, y, 0.0);\r\n        this.EnableAllCompositeModeButton.setScale(0.5, 0.5, 0.5);\r\n        this.EnableAllCompositeModeButton.on(Button.EventType.CLICK, this.enableAllCompositeMode, this);\r\n        this.EnableAllCompositeModeButton.parent = buttonNode;\r\n        let labelComponent = this.EnableAllCompositeModeButton.getComponentInChildren(Label);\r\n        this.labelComponentList[this.labelComponentList.length] = labelComponent;\r\n\r\n        const changeColorButton = instantiate(this.EnableAllCompositeModeButton);\r\n        changeColorButton.setPosition(x + 90, y, 0.0);\r\n        changeColorButton.setScale(0.5, 0.5, 0.5);\r\n        changeColorButton.on(Button.EventType.CLICK, this.changeTextColor, this);\r\n        changeColorButton.parent = buttonNode;\r\n        labelComponent = changeColorButton.getComponentInChildren(Label);\r\n        labelComponent.string = 'TextColor';\r\n        this.labelComponentList[this.labelComponentList.length] = labelComponent;\r\n\r\n        const HideButton = instantiate(this.EnableAllCompositeModeButton);\r\n        HideButton.setPosition(x + 200, y, 0.0);\r\n        HideButton.setScale(0.5, 0.5, 0.5);\r\n        HideButton.on(Button.EventType.CLICK, this.hideUI, this);\r\n        HideButton.parent = this.node.parent;\r\n        labelComponent = HideButton.getComponentInChildren(Label);\r\n        labelComponent.string = 'Hide UI';\r\n        this.labelComponentList[this.labelComponentList.length] = labelComponent;\r\n        this.hideButtonLabel = labelComponent;\r\n\r\n        // misc\r\n        y -= 40;\r\n        for (let i = 0; i < this.strMisc.length; i++) {\r\n            const newNode = instantiate(this.compositeModeToggle);\r\n            newNode.setPosition(x, y - height * i, 0.0);\r\n            newNode.setScale(0.5, 0.5, 0.5);\r\n            newNode.parent = miscNode;\r\n\r\n            const textComponent = newNode.getComponentInChildren(RichText);\r\n            textComponent.string = this.strMisc[i];\r\n            this.textComponentList[this.textComponentList.length] = textComponent;\r\n            this.textContentList[this.textContentList.length] = textComponent.string;\r\n\r\n            const toggleComponent = newNode.getComponent(Toggle);\r\n            toggleComponent.isChecked = i ? true : false;\r\n            newNode.on(Toggle.EventType.TOGGLE, i ? this.toggleLightingWithAlbedo : this.toggleCSMColoration, this);\r\n            this.miscModeToggleList[i] = newNode;\r\n        }\r\n\r\n        // composite\r\n        y -= 150;\r\n        for (let i = 0; i < this.strComposite.length; i++) {\r\n            const newNode = i ? instantiate(this.compositeModeToggle) : this.compositeModeToggle;\r\n            newNode.setPosition(x, y - height * i, 0.0);\r\n            newNode.setScale(0.5, 0.5, 0.5);\r\n            newNode.parent = this.compositeModeToggle.parent;\r\n\r\n            const textComponent = newNode.getComponentInChildren(RichText);\r\n            textComponent.string = this.strComposite[i];\r\n            this.textComponentList[this.textComponentList.length] = textComponent;\r\n            this.textContentList[this.textContentList.length] = textComponent.string;\r\n\r\n            newNode.on(Toggle.EventType.TOGGLE, this.toggleCompositeMode, this);\r\n\r\n            this.compositeModeToggleList[i] = newNode;\r\n        }\r\n    }\r\n\r\n    isTextMatched(textUI, textDescription) : boolean {\r\n        let tempText = new String(textUI);\r\n        const findIndex = tempText.search('>');\r\n        if (findIndex === -1) {\r\n            return textUI === textDescription;\r\n        } else {\r\n            tempText = tempText.substr(findIndex + 1);\r\n            tempText = tempText.substr(0, tempText.search('<'));\r\n            return tempText === textDescription;\r\n        }\r\n    }\r\n    toggleSingleMode(toggle: Toggle) {\r\n        const debugView = director.root!.debugView;\r\n        const textComponent = toggle.getComponentInChildren(RichText);\r\n        for (let i = 0; i < this.strSingle.length; i++) {\r\n            if (this.isTextMatched(textComponent.string, this.strSingle[i])) {\r\n                debugView.singleMode = i;\r\n            }\r\n        }\r\n    }\r\n    toggleCompositeMode(toggle: Toggle) {\r\n        const debugView = director.root!.debugView;\r\n        const textComponent = toggle.getComponentInChildren(RichText);\r\n        for (let i = 0; i < this.strComposite.length; i++) {\r\n            if (this.isTextMatched(textComponent.string, this.strComposite[i])) {\r\n                debugView.enableCompositeMode(i, toggle.isChecked);\r\n            }\r\n        }\r\n    }\r\n    toggleLightingWithAlbedo(toggle: Toggle) {\r\n        const debugView = director.root!.debugView;\r\n        debugView.lightingWithAlbedo = toggle.isChecked;\r\n    }\r\n    toggleCSMColoration(toggle: Toggle) {\r\n        const debugView = director.root!.debugView;\r\n        debugView.csmLayerColoration = toggle.isChecked;\r\n    }\r\n    enableAllCompositeMode(button: Button) {\r\n        const debugView = director.root!.debugView;\r\n        debugView.enableAllCompositeMode(true);\r\n        for (let i = 0; i < this.compositeModeToggleList.length; i++) {\r\n            const toggleComponent = this.compositeModeToggleList[i].getComponent(Toggle);\r\n            toggleComponent.isChecked = true;\r\n        }\r\n\r\n        let toggleComponent = this.miscModeToggleList[0].getComponent(Toggle);\r\n        toggleComponent.isChecked = false;\r\n        debugView.csmLayerColoration = false;\r\n        toggleComponent = this.miscModeToggleList[1].getComponent(Toggle);\r\n        toggleComponent.isChecked = true;\r\n        debugView.lightingWithAlbedo = true;\r\n    }\r\n    hideUI(button: Button) {\r\n        const titleNode = this.node.getChildByName('Titles');\r\n        const activeValue = !titleNode.active;\r\n        this.singleModeToggleList[0].parent.active = activeValue;\r\n        this.miscModeToggleList[0].parent.active = activeValue;\r\n        this.compositeModeToggleList[0].parent.active = activeValue;\r\n        this.EnableAllCompositeModeButton.parent.active = activeValue;\r\n        titleNode.active = activeValue;\r\n        this.hideButtonLabel.string = activeValue ? 'Hide UI' : 'Show UI';\r\n    }\r\n\r\n    private _currentColorIndex = 0;\r\n    private strColor: string[] = [\r\n        '<color=#ffffff>',\r\n        '<color=#000000>',\r\n        '<color=#ff0000>',\r\n        '<color=#00ff00>',\r\n        '<color=#0000ff>',\r\n    ];\r\n    private color: Color[] = [\r\n        Color.WHITE,\r\n        Color.BLACK,\r\n        Color.RED,\r\n        Color.GREEN,\r\n        Color.BLUE,\r\n    ];\r\n    changeTextColor(button: Button) {\r\n        this._currentColorIndex++;\r\n        if (this._currentColorIndex >= this.strColor.length) {\r\n            this._currentColorIndex = 0;\r\n        }\r\n        for (let i = 0; i < this.textComponentList.length; i++) {\r\n            this.textComponentList[i].string = this.strColor[this._currentColorIndex] + this.textContentList[i] + '</color>';\r\n        }\r\n        for (let i = 0; i < this.labelComponentList.length; i++) {\r\n            this.labelComponentList[i].color = this.color[this._currentColorIndex];\r\n        }\r\n    }\r\n\r\n    onLoad() {\r\n    }\r\n    update(deltaTime: number) {\r\n    }\r\n}\r\n"]}