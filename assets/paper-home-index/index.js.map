{"version":3,"sources":["../file:/D:/XForgTestUIGame/assets/app-bundle/app-view/paper/home/index/native/file:/D:/XForgTestUIGame/assets/app-bundle/app-view/paper/home/index/native/PaperHomeIndex.ts"],"names":["ccclass","_decorator","property","_dec","_dec2","Node","_dec3","_dec4","_dec5","_dec6","Label","_class2","_BaseView$BindControl","PaperHomeIndex","_this","_len","arguments","length","args","Array","_key","call","apply","concat","_initializerDefineProperty","_descriptor","_assertThisInitialized","_descriptor2","_descriptor3","_descriptor4","_descriptor5","maxCount","_inheritsLoose","_proto","prototype","onLoad","_this2","this","pop","on","Button","EventType","CLICK","app","manager","ui","show","name","data","viewName","_loop","node","instantiate","identity","i","active","button","getComponent","clickEvents","customEventData","toString","log","config","AllotIdentityCfg","icon","loader","load","bundle","path","type","SpriteFrame","onComplete","asset","console","Sprite","spriteFrame","layout","addChild","controller","HomeController","Event","IDENTITY_COUNT_UPDATE","updateCount","onShow","params","_this3","scheduleOnce","home","refresh","emit","Refresh2","test","onHide","targetOff","onClickIdentity","event","target","count","find","string","cutCount","num","JmRoomDataMgr","delRoomCfg","Number","setRoomCfg","getRoomCfg","onClickClose","onCreateRoom","title","message","okCb","okText","dialogType","cfg","identities","get","push","setRoomCount","setOwner","setGameState","BaseView","BindController","_applyDecoratedDescriptor","configurable","enumerable","writable","initializer","_class","_RF"],"mappings":"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","file":"all.js","sourcesContent":["import { _decorator, Button, find, instantiate, Label, Layout, Node, Prefab, Sprite, SpriteFrame } from 'cc';\r\nimport BaseView from '../../../../../../../extensions/app/assets/base/BaseView';\r\nimport { HomeController } from '../../../../../../app-builtin/app-controller/HomeController';\r\nimport { app } from '../../../../../../app/app';\r\nimport JmRoomDataMgr from 'db://assets/res-native/manager/JmRoomDataMgr';\r\nconst { ccclass, property } = _decorator;\r\n@ccclass('PaperHomeIndex')\r\nexport class PaperHomeIndex extends BaseView.BindController(HomeController) {\r\n    @property(Node)\r\n    goto: Node;\r\n    @property(Node)\r\n    pop: Node;\r\n\r\n    @property(Node)\r\n    layout: Node;\r\n    @property(Node)\r\n    identity: Node;\r\n    @property(Label)\r\n    num: Label = null;\r\n\r\n  maxCount = 0\r\n    // 初始化的相关逻辑写在这\r\n    onLoad() {\r\n        // this.goto.on(Button.EventType.CLICK, () => {\r\n        //     app.manager.ui.show({\r\n        //         name: 'PageGame'\r\n        //     });\r\n        // });\r\n        this.pop.on(Button.EventType.CLICK, () => {\r\n            app.manager.ui.show({\r\n                name: 'PopTip',\r\n                data: this.viewName\r\n            });\r\n        });\r\n\r\n        for (let i = 1; i < 17; i++) {\r\n            let node = instantiate(this.identity);\r\n            node.name = `identity${i}`;\r\n            node.active = true;\r\n            let button = node.getComponent(Button);\r\n            if (button) {\r\n                // 通过按钮的 clickEvents 来设置自定义数据\r\n                if (button.clickEvents && button.clickEvents.length > 0) {\r\n                    // 如果已经有click事件，修改第一个事件的customEventData\r\n                    button.clickEvents[0].customEventData = i.toString();\r\n                } else {\r\n                    // 如果没有click事件，可能需要添加新的事件\r\n                    // 这种情况通常在编辑器中设置，代码中较少动态添加\r\n                }\r\n            }\r\n            this.log('app.config.const.AllotIdentityCfg[i].icon=', app.config.const.AllotIdentityCfg[i].icon)\r\n            app.manager.loader.load({\r\n                bundle: 'identity', // 不传入bundle，默认为resources\r\n                path: `${app.config.const.AllotIdentityCfg[i].icon}_n/spriteFrame`,\r\n                type: SpriteFrame,\r\n                onComplete(asset) {\r\n                    console.log('加载资源完成', asset);\r\n                    node.getComponent(Sprite).spriteFrame = asset;\r\n                }\r\n            })\r\n\r\n            this.layout.addChild(node);\r\n        }\r\n        //监听\r\n        this.controller.on(HomeController.Event.IDENTITY_COUNT_UPDATE, this.updateCount, this);\r\n    }\r\n\r\n    // 界面打开时的相关逻辑写在这(onShow可被多次调用-它与onHide不成对)\r\n    onShow(params: any) {\r\n        // 这里延迟一下，等PageHome初始化完成再触发事件\r\n        this.scheduleOnce(() => {\r\n            // 通过单例只能访问对外暴露的接口\r\n            app.controller.home.refresh('PaperHomeIndex');\r\n\r\n            // 通过绑定的controller实例访问内部事件\r\n            this.controller.emit(HomeController.Event.Refresh2, 'PaperHomeIndex');\r\n\r\n            // 报错，外部不可写\r\n            // app.controller.home.test = 1;\r\n\r\n            // 正确，内部可写\r\n            this.controller.test = 10;\r\n        });\r\n    }\r\n\r\n    onHide(data?: any) {\r\n        this.controller.targetOff(this);\r\n    }\r\n\r\n    onClickIdentity(event: Event, target: string) {\r\n        this.log('event=', event);\r\n        this.log('target=', target);\r\n\r\n        // this.layout.addChild(app.manager.ui.createNode({\r\n        //     name: 'Identity',\r\n\r\n        // app.manager.ui.show<UI类>({\r\n        //     name: '自动提示UI名',\r\n        //     data: 自动提示onShow方法需要的参数,\r\n        //     onShow: () => {\r\n\r\n        //     },\r\n        //     onHide: (result) => { \r\n        //     //result自动识别为onHide的返回值类型 \r\n        //     },\r\n        //     onError: () => {\r\n\r\n        //     }\r\n        // });\r\n\r\n        let countNode = find(`identity${target}/numBg/num`, this.layout)\r\n        let count = countNode.getComponent(Label).string\r\n        let data = {\r\n            type: target,\r\n            count: count,\r\n            maxCount: this.maxCount\r\n        }\r\n        app.manager.ui.show({\r\n            data: data,\r\n            name: 'PopIdentity'\r\n        });\r\n    }\r\n\r\n    updateCount(data:any) {\r\n        this.maxCount += data.cutCount\r\n        this.num.string = `总人数：${this.maxCount}人`;\r\n\r\n        if (data.count <= 0)\r\n        JmRoomDataMgr.delRoomCfg(Number(data.type))\r\n        else\r\n        JmRoomDataMgr.setRoomCfg(Number(data.type), data.count)\r\n\r\n        this.log('JmRoomDataMgr.getRoomCfg()=', JmRoomDataMgr.getRoomCfg());\r\n        let countBg = find(`identity${data.type}/numBg`, this.layout)\r\n        countBg.active = data.count > 0\r\n        let countNode = find(`identity${data.type}/numBg/num`, this.layout)\r\n        countNode.getComponent(Label).string = data.count\r\n    }\r\n\r\n    onClickClose() {\r\n        app.manager.ui.show({\r\n            name: 'PageMain'\r\n        });\r\n    }\r\n\r\n    onCreateRoom() {\r\n        if (this.maxCount < 6) {\r\n            app.manager.ui.show({\r\n                data : {\r\n                        title: \"提示\",\r\n                        message: \"开局人数最少为6人哦~\",\r\n                        okCb: () => { },\r\n                        okText: \"知道了\",\r\n                        dialogType: 2\r\n                    },\r\n                name: 'PopCommondialog',\r\n            });\r\n            return\r\n        }\r\n        \r\n\r\n        let cfg = JmRoomDataMgr.getRoomCfg()\r\n        let identities = []\r\n        for (let i = 1; i < 17; i++) {\r\n        if (cfg.get(i))\r\n            identities.push(cfg.get(i))\r\n        else\r\n            identities.push(0)\r\n        }\r\n        // JmRoomDataMgr.InitCurrentRoomProto();\r\n        JmRoomDataMgr.setRoomCount(this.maxCount)\r\n        JmRoomDataMgr.setOwner(true)\r\n        JmRoomDataMgr.setGameState(2)\r\n\r\n        app.manager.ui.show({\r\n            name: 'PageRoom',\r\n        });\r\n    }\r\n}"]}